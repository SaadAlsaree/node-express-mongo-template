version: '3.8'

services:
  # ============================================
  # Application Service
  # ============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: express-app
    ports:
      - '5000:5000'
    environment:
      - NODE_ENV=production
      - SERVER_PORT=5000
      - DATABASE_URI=mongodb://mongo:27017/yourapp
      - REDIS_HOST=redis://redis:6379
      - JWT_TOKEN=${JWT_TOKEN}
      - SECRET_KEY_ONE=${SECRET_KEY_ONE}
      - SECRET_KEY_TWO=${SECRET_KEY_TWO}
      - CLIENT_URL=${CLIENT_URL}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./src:/usr/src/app/src
      - /usr/src/app/node_modules

  # ============================================
  # MongoDB Service
  # ============================================
  mongo:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_DATABASE=yourapp
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis Service
  # ============================================
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Mongo Express (Optional - for DB Management)
  # ============================================
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - '8081:8081'
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongo
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - debug

  # ============================================
  # Redis Commander (Optional - for Redis Management)
  # ============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - '8082:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - debug

# ============================================
# Networks
# ============================================
networks:
  app-network:
    driver: bridge

# ============================================
# Volumes
# ============================================
volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  redis-data:
    driver: local
# ============================================
# USAGE INSTRUCTIONS
# ============================================
# Start all services:
#   docker-compose up -d
#
# Start with debug tools (Mongo Express & Redis Commander):
#   docker-compose --profile debug up -d
#
# View logs:
#   docker-compose logs -f
#   docker-compose logs -f app
#
# Stop all services:
#   docker-compose down
#
# Stop and remove volumes:
#   docker-compose down -v
#
# Rebuild app:
#   docker-compose up -d --build app
#
# Access Points:
#   - App: http://localhost:5000
#   - API Monitoring: http://localhost:5000/api-monitoring
#   - Mongo Express: http://localhost:8081 (with --profile debug)
#   - Redis Commander: http://localhost:8082 (with --profile debug)
